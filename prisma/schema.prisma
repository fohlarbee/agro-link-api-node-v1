// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  orders          Order[]
  payments        Payment[]
  businesses        Staff[]
  createdBusinesses Business[]
  shifts          Shift[]
}

model Business {
  id          Int          @id @default(autoincrement())
  name        String
  cacNumber   String       @db.VarChar(20)
  phoneNumber String
  email       String?
  type        BusinessType @default(restaurant)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relationships
  creatorId Int
  creator   User     @relation(fields: [creatorId], references: [id])
  menus     Menu[]
  option      Option[]
  orders    Order[]
  roles     Role[]
  staffs    Staff[]
  outlets   Outlet[]
  shifts    Shift[]
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  businessId Int
  business   Business @relation(fields: [businessId], references: [id])
  staffs     Staff[]
  shifts     Shift[]

  @@unique([businessId, name])
}

model Staff {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relatioinships
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  businessId Int
  business   Business @relation(fields: [businessId], references: [id])
  roleId     Int
  role       Role     @relation(fields: [roleId], references: [id])
  shifts     Shift[]
  orders     Order[]

  // Keys
  @@id([userId, businessId])
  @@unique([userId, businessId])
}

model Outlet {
  id         Int      @id @default(autoincrement())
  address    String
  // Relationships
  businessId Int
  business   Business @relation(fields: [businessId], references: [id])
  tables     Table[]
  shifts     Shift[]
}

model Table {
  id         Int      @id @default(autoincrement())
  identifier String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  outletId       Int
  outlet         Outlet        @relation(fields: [outletId], references: [id])
  assignedShifts ShiftTables[]
  orders         Order[]
}

model Shift {
  id        Int      @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  businessId     Int
  business       Business      @relation(fields: [businessId], references: [id])
  outletId       Int
  outlet         Outlet        @relation(fields: [outletId], references: [id])
  userId         Int
  user           User          @relation(fields: [userId], references: [id])
  roleId         Int
  role           Role          @relation(fields: [roleId], references: [id])
  staff          Staff         @relation(fields: [userId, businessId], references: [userId, businessId])
  assignedTables ShiftTables[]
  orders         Order[]
}

model ShiftTables {
  shiftId Int
  shift   Shift @relation(fields: [shiftId], references: [id])
  tableId Int
  table   Table @relation(fields: [tableId], references: [id])

  // Compound key
  @@id([shiftId, tableId])
}

model Menu {
  id        Int      @id @default(autoincrement())
  name      String   @default("All")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  businessId Int
  business   Business      @relation(fields: [businessId], references: [id])
  options    MenuOptions[]
}

model MenuOptions {
  menuId   Int
  menu     Menu   @relation(fields: [menuId], references: [id])
  optionId Int
  option   Option @relation(fields: [optionId], references: [id])

  // Compound key
  @@id([menuId, optionId])
}

model Option {
  id        Int        @id @default(autoincrement())
  name      String
  price     Float
  image     String
  type      optionType @default(meal)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relationships
  businessId Int
  business   Business      @relation(fields: [businessId], references: [id])
  menu       MenuOptions[]
  orders     OrderOption[]
}

enum optionType {
  meal
  drink
}

model Order {
  id          Int         @id @default(autoincrement())
  status      OrderStatus @default(active)
  createdAt   DateTime    @default(now())
  tip         Float?
  paidAt      DateTime?
  completedAt DateTime?
  cancelledAt DateTime?

  // Relationships
  customerId Int
  customer   User          @relation(fields: [customerId], references: [id])
  businessId Int
  business   Business      @relation(fields: [businessId], references: [id])
  payment    Payment?
  tableId    Int
  table      Table         @relation(fields: [tableId], references: [id])
  shiftId    Int
  shift      Shift         @relation(fields: [shiftId], references: [id])
  waiterId   Int
  waiter     Staff         @relation(fields: [waiterId, businessId], references: [userId, businessId])
  options    OrderOption[]
}

enum OrderStatus {
  active
  paid
  queue
  kitchen
  completed
  cancelled
}

enum BusinessType {
  restaurant
  bar
}

model OrderOption {
  quantity Int

  // relationships
  orderId  Int
  order    Order  @relation(fields: [orderId], references: [id])
  optionId Int
  option   Option @relation(fields: [optionId], references: [id])

  // Compound key
  @@id([orderId, optionId])
}

model Payment {
  id        Int      @id @default(autoincrement())
  amount    Float
  reference String   @unique
  paidAt    DateTime

  // Relationships
  orderId Int   @unique
  order   Order @relation(fields: [orderId], references: [id])
  userId  Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

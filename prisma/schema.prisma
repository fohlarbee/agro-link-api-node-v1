// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GuardRoles {
  customer
  admin
  waiter
  manager
  kitchen
  owner
  guest
}

enum PaymentType {
  DEPOSIT
  ORDER_PAYMENT
  REFUND
  WALLET_TRANSFER
}

enum OwnerType {
  BUSINESS
  CUSTOMER
  WAITER
  KITCHEN_STAFF
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  name      String
  avatar    String?
  role      GuardRoles @default(customer)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relationships
  orders            Order[]
  payments          Payment[]
  businesses        Staff[]
  createdBusinesses Business[]
  shifts            Shift[]
  wallet            Wallet?
}

model Business {
  id          Int          @id @default(autoincrement())
  name        String
  cacNumber   String       @db.VarChar(20)
  phoneNumber String
  email       String?
  type        BusinessType @default(restaurant)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relationships
  creatorId Int
  creator   User     @relation(fields: [creatorId], references: [id])
  menus     Menu[]
  options   Option[]
  orders    Order[]
  roles     Role[]
  staffs    Staff[]
  outlets   Outlet[]
  shifts    Shift[]
  wallet    Wallet?
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  businessId Int
  business   Business @relation(fields: [businessId], references: [id])
  staffs     Staff[]
  shifts     Shift[]

  @@unique([businessId, name])
}

model Staff {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relatioinships
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  businessId Int
  business   Business @relation(fields: [businessId], references: [id])
  roleId     Int
  role       Role     @relation(fields: [roleId], references: [id])
  shifts     Shift[]
  // orders     Order[]

  ordersAsWaiter       Order[] @relation("OrderWaiter")
  ordersAsKitchenStaff Order[] @relation("OrderKitchenStaff")

  // Keys
  @@id([userId, businessId])
  @@unique([userId, businessId])
}

model Outlet {
  id         Int      @id @default(autoincrement())
  address    String
  // Relationships
  businessId Int
  business   Business @relation(fields: [businessId], references: [id])
  tables     Table[]
  shifts     Shift[]
}

model Table {
  id         Int      @id @default(autoincrement())
  identifier String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  outletId       Int
  outlet         Outlet        @relation(fields: [outletId], references: [id])
  assignedShifts ShiftTables[]
  orders         Order[]
}

model Shift {
  id        Int      @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  businessId     Int
  business       Business      @relation(fields: [businessId], references: [id])
  outletId       Int
  outlet         Outlet        @relation(fields: [outletId], references: [id])
  userId         Int
  user           User          @relation(fields: [userId], references: [id])
  roleId         Int
  role           Role          @relation(fields: [roleId], references: [id])
  staff          Staff         @relation(fields: [userId, businessId], references: [userId, businessId])
  assignedTables ShiftTables[]
  orders         Order[]
}

model ShiftTables {
  shiftId Int
  shift   Shift @relation(fields: [shiftId], references: [id])
  tableId Int
  table   Table @relation(fields: [tableId], references: [id])

  // Compound key
  @@id([shiftId, tableId])
}

model Menu {
  id        Int      @id @default(autoincrement())
  name      String   @default("All")
  type      MenuType @default(starters)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  businessId Int
  business   Business      @relation(fields: [businessId], references: [id])
  options    MenuOptions[]
}

model MenuOptions {
  menuId   Int
  menu     Menu   @relation(fields: [menuId], references: [id])
  optionId Int
  option   Option @relation(fields: [optionId], references: [id])

  // Compound key
  @@id([menuId, optionId])
}

enum MenuType {
  starters
  breakfast
  lunch
  dinner
  mains
}

model Option {
  id        Int        @id @default(autoincrement())
  name      String
  price     Float
  image     String
  type      optionType @default(meal)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relationships
  businessId Int
  business   Business      @relation(fields: [businessId], references: [id])
  menu       MenuOptions[]
  orders     OrderOption[]
}

enum optionType {
  meal
  drink
}

model Order {
  id          Int         @id @default(autoincrement())
  status      OrderStatus @default(active)
  createdAt   DateTime    @default(now())
  tip         Float?      @default(0)
  paidAt      DateTime?
  completedAt DateTime?
  cancelledAt DateTime?

  cancelledBy Int?     @default(0)
  // Relationships
  customerId  Int
  customer    User     @relation(fields: [customerId], references: [id])
  businessId  Int
  business    Business @relation(fields: [businessId], references: [id])
  paymentId   Int?
  payment     Payment? @relation(fields: [paymentId], references: [id])
  tableId     Int
  table       Table    @relation(fields: [tableId], references: [id])
  shiftId     Int
  shift       Shift    @relation(fields: [shiftId], references: [id])
  // waiterId   Int
  // waiter     Staff         @relation(fields: [waiterId, businessId], references: [userId, businessId])

  waiterId       Int
  waiter         Staff         @relation("OrderWaiter", fields: [waiterId, businessId], references: [userId, businessId])
  kitchenStaffId Int
  kitchenStaff   Staff         @relation("OrderKitchenStaff", fields: [kitchenStaffId, businessId], references: [userId, businessId])
  options        OrderOption[]
}

enum OrderStatus {
  active //The order has been placed by the customer but is yet to be processed by the business.
  paid //indicates successful payment
  failed //means the payment was unsuccessful.
  preparing //The business has accepted the order and is currently preparing the food.
  rejected //The business has declined the order, possibly due to being too busy, out of stock items, or other reasons.
  cancelled //The order has been canceled by either the customer or the business.
  ready //The food is prepared and ready for pickup or delivery.
  completed //The order has been delivered to the customer or picked up by the customer.
}

enum BusinessType {
  restaurant
  bar
}

model OrderOption {
  quantity Int

  // relationships
  orderId  Int
  order    Order  @relation(fields: [orderId], references: [id])
  optionId Int
  option   Option @relation(fields: [optionId], references: [id])

  // Compound key
  @@id([orderId, optionId])
}

model Payment {
  id         Int             @id @default(autoincrement())
  amount     Float
  reference  String          @unique
  type       PaymentType
  paidAt     DateTime        @default(now())
  provider   PaymentProvider @default(PAYSTACK)
  providerId String          @unique

  // Relationships
  orders   Order[]
  userId   Int
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  walletId Int?
  wallet   Wallet? @relation(fields: [walletId], references: [id])
}

enum PaymentProvider {
  PAYSTACK
  FLUTTERWAVE
  MONNIFY
  MONO
  MOMO_PSB
  QQ_WALLET
}

model Otp {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  otp        String
  isVerified Boolean
  for        String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Wallet {
  id         Int       @id @default(autoincrement())
  balance    Float
  userId     Int?      @unique
  businessId Int?      @unique
  // ownerType  OwnerType
  payments   Payment[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  //Relationships
  user     User?     @relation(fields: [userId], references: [id])
  business Business? @relation(fields: [businessId], references: [id])

  @@unique([userId, businessId])
}

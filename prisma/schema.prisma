// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  orders             Order[]
  payments           Payment[]
  restaurants        Staff[]
  createdRestaurants Restaurant[]
  shifts             Shift[]
}

model Restaurant {
  id          Int      @id @default(autoincrement())
  name        String
  cacNumber   String   @db.VarChar(20)
  phoneNumber String
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  creatorId Int
  creator   User     @relation(fields: [creatorId], references: [id])
  menus     Menu[]
  meals     Meal[]
  orders    Order[]
  roles     Role[]
  staffs    Staff[]
  outlets   Outlet[]
  shifts    Shift[]
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  staffs       Staff[]
  shifts       Shift[]

  @@unique([restaurantId, name])
}

model Staff {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relatioinships
  userId       Int
  user         User       @relation(fields: [userId], references: [id])
  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  roleId       Int
  role         Role       @relation(fields: [roleId], references: [id])
  shifts       Shift[]
  orders       Order[]

  // Keys
  @@id([userId, restaurantId])
  @@unique([userId, restaurantId])
}

model Outlet {
  id           Int        @id @default(autoincrement())
  address      String
  // Relationships
  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  tables       Table[]
  shifts       Shift[]
}

model Table {
  id         Int      @id @default(autoincrement())
  identifier String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  outletId       Int
  outlet         Outlet        @relation(fields: [outletId], references: [id])
  assignedShifts ShiftTables[]
  orders         Order[]
}

model Shift {
  id        Int      @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  restaurantId   Int
  restaurant     Restaurant    @relation(fields: [restaurantId], references: [id])
  outletId       Int
  outlet         Outlet        @relation(fields: [outletId], references: [id])
  userId         Int
  user           User          @relation(fields: [userId], references: [id])
  roleId         Int
  role           Role          @relation(fields: [roleId], references: [id])
  staff          Staff         @relation(fields: [userId, restaurantId], references: [userId, restaurantId])
  assignedTables ShiftTables[]
  orders         Order[]
}

model ShiftTables {
  shiftId Int
  shift   Shift @relation(fields: [shiftId], references: [id])
  tableId Int
  table   Table @relation(fields: [tableId], references: [id])

  // Compound key
  @@id([shiftId, tableId])
}

model Menu {
  id        Int      @id @default(autoincrement())
  name      String   @default("All")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  restaurantId Int
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  meals        MenuMeals[]
}

model MenuMeals {
  menuId Int
  menu   Menu @relation(fields: [menuId], references: [id])
  mealId Int
  meal   Meal @relation(fields: [mealId], references: [id])

  // Compound key
  @@id([menuId, mealId])
}

model Meal {
  id        Int      @id @default(autoincrement())
  name      String
  price     Float
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  restaurantId Int
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  menu         MenuMeals[]
  orders       OrderMeal[]
}

model Order {
  id          Int         @id @default(autoincrement())
  status      OrderStatus @default(active)
  createdAt   DateTime    @default(now())
  tip         Float
  paidAt      DateTime?
  completedAt DateTime?
  cancelledAt DateTime?

  // Relationships
  customerId   Int
  customer     User        @relation(fields: [customerId], references: [id])
  restaurantId Int
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  payment      Payment?
  tableId      Int
  table        Table       @relation(fields: [tableId], references: [id])
  shiftId      Int
  shift        Shift       @relation(fields: [shiftId], references: [id])
  waiterId     Int
  waiter       Staff       @relation(fields: [waiterId, restaurantId], references: [userId, restaurantId])
  meals        OrderMeal[]
  hotelId      Int?
  hotel        Hotel?      @relation(fields: [hotelId], references: [id])

  // hotel       Hotel?      @relation(fields: [hotelId], references: [id])
}

enum OrderStatus {
  active
  paid
  queue
  kitchen
  completed
  cancelled
}

model OrderMeal {
  quantity Int

  // relationships
  orderId Int
  order   Order @relation(fields: [orderId], references: [id])
  mealId  Int
  meal    Meal  @relation(fields: [mealId], references: [id])

  // Compound key
  @@id([orderId, mealId])
}

model Payment {
  id        Int      @id @default(autoincrement())
  amount    Float
  reference String   @unique
  paidAt    DateTime

  // Relationships
  orderId Int   @unique
  order   Order @relation(fields: [orderId], references: [id])
  userId  Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}



model BarItems {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Int
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  //relationships
  barId Int
  bar   Bar @relation(fields: [barId], references: [id])
}


model Hotel {
  id          Int      @id @default(autoincrement())
  name        String
  cacNumber   String   @db.VarChar(20)
  phoneNumber String
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  orders Order[]
}



model Bar {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  price       Int
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  //relationships
  bars BarItems[]
}

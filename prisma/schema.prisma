// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  roleId    Int
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships

  restaurant Restaurant?
  orders     Order[]
  payments   Payment[]
}

model Restaurant {
  id          Int      @id @default(autoincrement())
  name        String
  cacNumber   String   @db.VarChar(20)
  address     String
  phoneNumber String
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  ownerId Int     @unique
  owner   User    @relation(fields: [ownerId], references: [id])
  menus   Menu[]
  orders  Order[]
}

model Menu {
  id        Int      @id @default(autoincrement())
  name      String   @default("All")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  meals Meal[]
}

model Meal {
  id        Int      @id @default(autoincrement())
  name      String
  price     Float
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  menuId Int
  menu   Menu @relation(fields: [menuId], references: [id])

  orders OrderMeal[]
}

model Order {
  id          Int         @id @default(autoincrement())
  status      OrderStatus @default(active)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  completedAt DateTime?

  // Relationships
  customerId   Int
  customer     User       @relation(fields: [customerId], references: [id])
  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  payment      Payment?

  meals OrderMeal[]
}

enum OrderStatus {
  active
  paid
  in_queue
  completed
}

model OrderMeal {
  quantity Int

  // relationships
  orderId Int
  order   Order @relation(fields: [orderId], references: [id])
  mealId  Int
  meal    Meal  @relation(fields: [mealId], references: [id])

  // Compound key
  @@id([orderId, mealId])
}

model Payment {
  id        Int      @id @default(autoincrement())
  amount    Float
  reference String   @unique
  paidAt    DateTime

  // Relationships
  orderId Int   @unique
  order   Order @relation(fields: [orderId], references: [id])
  userId  Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}
